*auctor.txt*                         Auctor plugin

Auctor is a Neovim plugin which integrates a configurable LLM to help
refactor code. It sends selected text to the provider, shows a diff
preview and then applies the changes on your command.

                                                       *:AuctorUpdate*
    :AuctorUpdate              Send the current visual selection to the
                                model for modification. A diff preview
                                window is shown; press `y` or `<CR>` to
                                accept, `n` or `q` to cancel.

                                                       *:AuctorAdd*
    :AuctorAdd                 Upload the entire buffer as context for
                                future requests. This does not change
                                any text.

                                                       *:AuctorInsert*
    :AuctorInsert              Insert an instruction marker comment below
                                the current line and enter insert mode.
                                The marker is configurable via
                                |instruction_marker|.

                                                       *:AuctorAutoAddToggle*
    :AuctorAutoAddToggle       Toggle automatically calling
                                `:AuctorAdd` on `BufReadPost` and
                                `BufNewFile`. The current state is
                                stored in |auto_add|.

                                                       *:AuctorUse*
    :AuctorUse {name}          Switch to the given provider. Provider
                                definitions are loaded from
                                `.auctor.toml` or passed via
                                |providers| at setup time.

                                                       *:AuctorConfigUI*
    :AuctorConfigUI            Open a floating window listing all
                                configured providers. From here you can
                                add, delete, select and save providers.

                                                       *:AuctorStatus*
    :AuctorStatus              Show the active provider, model, temperature
                                and the session cost so far.

                                                       *:AuctorAbort*
    :AuctorAbort               Cancel any inâ€‘flight request. Useful if
                                you accidentally send a large file.

CONFIGURATION                           *auctor-configuration*

    Use `require('auctor').setup()` to configure the plugin. The
    following keys are recognised in the options table:

    instruction_marker    String inserted by |:AuctorInsert|. Default `|||`.
    system_update_prompt  System prompt for update operations. If not
                          provided, a sensible default will be used.
    system_add_prompt     System prompt for add operations. Defaults to a
                          brief acknowledgement request.
    auto_add              Boolean controlling whether buffers are
                          automatically uploaded on read/new. Default false.
    providers             Table of provider definitions keyed by name.

    Provider definitions have these fields:

        base_url       The HTTP endpoint for chat completions.
        model          The model to use (e.g. gpt-4o).
        temperature    Sampling temperature.
        api_key_env    Name of the environment variable holding the key.
        update_prompt  Additional text appended to the system update prompt.
        add_prompt     Additional text appended to the system add prompt.

    Providers can also be defined in a `.auctor.toml` file located in
    the working directory or in `$XDG_CONFIG_HOME/auctor/auctor.toml`. See
    README for an example.

SEE ALSO
    README.md for a high-level overview.